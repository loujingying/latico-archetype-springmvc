<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="false" scan="false" scanPeriod="60 seconds">
    <property name="CHARSET" value="utf-8"/><!-- 字符集 -->
    <property name="LOG_HOME" value="logs"/><!-- log目录 -->
    <property name="BACKUP" value="${LOG_HOME}/BACKUP/%d{yyyy-MM-dd}"/><!-- 日志备份目录 -->
    <property name="PATTERN_DEF"
              value="[%d{yyyy-MM-dd HH:mm:ss SSS}] [%-5p] [%t] [%c:%L] - %m%n"/><!-- 日志输出格式, %c{0} 表示打印logger名，若logger名是一个类路径，则打印最后一个.右边的部分 -->
    <!--把spring的logback包含进来-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <!-- 控制台日志器 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${PATTERN_DEF}</pattern>
        </encoder>
        <target>System.out</target><!-- System.out|System.err -->
    </appender>

    <!-- 异常日志器  -->
    <appender name="exception"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/exception.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${BACKUP}/exception_%d{yyyy-MM-dd}-%i.log.zip</fileNamePattern>
            <maxHistory>15</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>64MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <charset>${CHARSET}</charset>
            <pattern>${PATTERN_DEF}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!-- 已经在根日志打印了 -->
    <!--	<logger name="com.latico" level="error" additivity="true">
         <appender-ref ref="exception" />
     </logger>-->

    <!-- 应用程序日志器 -->
    <appender name="app"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <prudent>false</prudent> <!-- 如果是 true，日志会被安全的写入文件（多线程同步），但效率低，默认是 false。 -->
        <file>${LOG_HOME}/app.log</file> <!-- 可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${BACKUP}/app_%d{yyyy-MM-dd}-%i.log.zip
            </fileNamePattern>
            <maxHistory>15</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>64MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <charset>${CHARSET}</charset>
            <pattern>${PATTERN_DEF}</pattern>
        </encoder>
    </appender>
    <!-- 主程序日志的打印包路径 -->
    <logger name="com.latico" level="info" additivity="true">
        <appender-ref ref="app"/>
    </logger>

    <!-- spring程序日志器 -->
    <appender name="spring"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <prudent>false</prudent> <!-- 如果是 true，日志会被安全的写入文件（多线程同步），但效率低，默认是 false。 -->
        <file>${LOG_HOME}/spring.log</file> <!-- 可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${BACKUP}/spring_%d{yyyy-MM-dd}-%i.log.zip
            </fileNamePattern>
            <maxHistory>15</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>64MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <charset>${CHARSET}</charset>
            <pattern>${PATTERN_DEF}</pattern>
        </encoder>
    </appender>
    <!-- spring程序日志 -->
    <logger name="org.springframework" level="info" additivity="true">
        <appender-ref ref="spring"/>
    </logger>
    <logger name="springfox" level="info" additivity="true">
        <appender-ref ref="spring"/>
    </logger>

    <!-- apache程序日志器 -->
    <appender name="tomcat"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <prudent>false</prudent> <!-- 如果是 true，日志会被安全的写入文件（多线程同步），但效率低，默认是 false。 -->
        <file>${LOG_HOME}/tomcat.log</file> <!-- 可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${BACKUP}/tomcat_%d{yyyy-MM-dd}-%i.log.zip
            </fileNamePattern>
            <maxHistory>15</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>64MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <charset>${CHARSET}</charset>
            <pattern>${PATTERN_DEF}</pattern>
        </encoder>
    </appender>
    <!-- tomcat程序日志 -->
    <logger name="org.apache.tomcat" level="info" additivity="true">
        <appender-ref ref="tomcat"/>
    </logger>
    <logger name="org.apache.catalina" level="info" additivity="true">
        <appender-ref ref="tomcat"/>
    </logger>
    <logger name="org.apache.coyote" level="info" additivity="true">
        <appender-ref ref="tomcat"/>
    </logger>

    <!-- mybatis程序日志器 -->
    <appender name="mybatis"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <prudent>false</prudent> <!-- 如果是 true，日志会被安全的写入文件（多线程同步），但效率低，默认是 false。 -->
        <file>${LOG_HOME}/mybatis.log</file> <!-- 可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${BACKUP}/mybatis_%d{yyyy-MM-dd}-%i.log.zip
            </fileNamePattern>
            <maxHistory>15</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>64MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <charset>${CHARSET}</charset>
            <pattern>${PATTERN_DEF}</pattern>
        </encoder>
    </appender>
    <!-- mybatis程序日志 -->
    <logger name="org.mybatis" level="info" additivity="true">
        <appender-ref ref="mybatis"/>
    </logger>
    <logger name="org.apache.ibatis" level="info" additivity="true">
        <appender-ref ref="mybatis"/>
    </logger>

    <!-- mybatis程序日志器 -->
    <appender name="other"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <prudent>false</prudent> <!-- 如果是 true，日志会被安全的写入文件（多线程同步），但效率低，默认是 false。 -->
        <file>${LOG_HOME}/other.log</file> <!-- 可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${BACKUP}/other_%d{yyyy-MM-dd}-%i.log.zip
            </fileNamePattern>
            <maxHistory>15</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>64MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <charset>${CHARSET}</charset>
            <pattern>${PATTERN_DEF}</pattern>
        </encoder>
    </appender>
    <!-- other程序日志 -->
    <logger name="org.apache.http" level="info" additivity="true">
        <appender-ref ref="other"/>
    </logger>
    <logger name="com.netflix" level="info" additivity="true">
        <appender-ref ref="other"/>
    </logger>
    <logger name="org.hibernate" level="info" additivity="true">
        <appender-ref ref="other"/>
    </logger>

    <!-- 根日志 -->
    <root level="debug">
        <appender-ref ref="console"/>
        <appender-ref ref="exception"/>
    </root>

</configuration>